// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Events.pb.h"
// @@protoc_insertion_point(imports)

@implementation EventsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [EventsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Event ()
@property EventEventType type;
@property (strong) ErrorEvent* error;
@property (strong) LinkEvent* link;
@property (strong) SignalEvent* signal;
@end

@implementation Event

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasError {
  return !!hasError_;
}
- (void) setHasError:(BOOL) _value_ {
  hasError_ = !!_value_;
}
@synthesize error;
- (BOOL) hasLink {
  return !!hasLink_;
}
- (void) setHasLink:(BOOL) _value_ {
  hasLink_ = !!_value_;
}
@synthesize link;
- (BOOL) hasSignal {
  return !!hasSignal_;
}
- (void) setHasSignal:(BOOL) _value_ {
  hasSignal_ = !!_value_;
}
@synthesize signal;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = EventEventTypeError;
    self.error = [ErrorEvent defaultInstance];
    self.link = [LinkEvent defaultInstance];
    self.signal = [SignalEvent defaultInstance];
  }
  return self;
}
static Event* defaultEventInstance = nil;
+ (void) initialize {
  if (self == [Event class]) {
    defaultEventInstance = [[Event alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultEventInstance;
}
- (instancetype) defaultInstance {
  return defaultEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasError) {
    if (!self.error.isInitialized) {
      return NO;
    }
  }
  if (self.hasLink) {
    if (!self.link.isInitialized) {
      return NO;
    }
  }
  if (self.hasSignal) {
    if (!self.signal.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasError) {
    [output writeMessage:51 value:self.error];
  }
  if (self.hasLink) {
    [output writeMessage:52 value:self.link];
  }
  if (self.hasSignal) {
    [output writeMessage:53 value:self.signal];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasError) {
    size_ += computeMessageSize(51, self.error);
  }
  if (self.hasLink) {
    size_ += computeMessageSize(52, self.link);
  }
  if (self.hasSignal) {
    size_ += computeMessageSize(53, self.signal);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Event*) parseFromData:(NSData*) data {
  return (Event*)[[[Event builder] mergeFromData:data] build];
}
+ (Event*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input {
  return (Event*)[[[Event builder] mergeFromInputStream:input] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EventBuilder*) builder {
  return [[EventBuilder alloc] init];
}
+ (EventBuilder*) builderWithPrototype:(Event*) prototype {
  return [[Event builder] mergeFrom:prototype];
}
- (EventBuilder*) builder {
  return [Event builder];
}
- (EventBuilder*) toBuilder {
  return [Event builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromEventEventType(self.type)];
  }
  if (self.hasError) {
    [output appendFormat:@"%@%@ {\n", indent, @"error"];
    [self.error writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLink) {
    [output appendFormat:@"%@%@ {\n", indent, @"link"];
    [self.link writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSignal) {
    [output appendFormat:@"%@%@ {\n", indent, @"signal"];
    [self.signal writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasError) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.error storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"error"];
  }
  if (self.hasLink) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.link storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"link"];
  }
  if (self.hasSignal) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.signal storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"signal"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Event class]]) {
    return NO;
  }
  Event *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasError == otherMessage.hasError &&
      (!self.hasError || [self.error isEqual:otherMessage.error]) &&
      self.hasLink == otherMessage.hasLink &&
      (!self.hasLink || [self.link isEqual:otherMessage.link]) &&
      self.hasSignal == otherMessage.hasSignal &&
      (!self.hasSignal || [self.signal isEqual:otherMessage.signal]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasError) {
    hashCode = hashCode * 31 + [self.error hash];
  }
  if (self.hasLink) {
    hashCode = hashCode * 31 + [self.link hash];
  }
  if (self.hasSignal) {
    hashCode = hashCode * 31 + [self.signal hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL EventEventTypeIsValidValue(EventEventType value) {
  switch (value) {
    case EventEventTypeError:
    case EventEventTypeLink:
    case EventEventTypeSignal:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEventEventType(EventEventType value) {
  switch (value) {
    case EventEventTypeError:
      return @"EventEventTypeError";
    case EventEventTypeLink:
      return @"EventEventTypeLink";
    case EventEventTypeSignal:
      return @"EventEventTypeSignal";
    default:
      return nil;
  }
}

@interface EventBuilder()
@property (strong) Event* resultEvent;
@end

@implementation EventBuilder
@synthesize resultEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEvent = [[Event alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEvent;
}
- (EventBuilder*) clear {
  self.resultEvent = [[Event alloc] init];
  return self;
}
- (EventBuilder*) clone {
  return [Event builderWithPrototype:resultEvent];
}
- (Event*) defaultInstance {
  return [Event defaultInstance];
}
- (Event*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Event*) buildPartial {
  Event* returnMe = resultEvent;
  self.resultEvent = nil;
  return returnMe;
}
- (EventBuilder*) mergeFrom:(Event*) other {
  if (other == [Event defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasError) {
    [self mergeError:other.error];
  }
  if (other.hasLink) {
    [self mergeLink:other.link];
  }
  if (other.hasSignal) {
    [self mergeSignal:other.signal];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        EventEventType value = (EventEventType)[input readEnum];
        if (EventEventTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 410: {
        ErrorEventBuilder* subBuilder = [ErrorEvent builder];
        if (self.hasError) {
          [subBuilder mergeFrom:self.error];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setError:[subBuilder buildPartial]];
        break;
      }
      case 418: {
        LinkEventBuilder* subBuilder = [LinkEvent builder];
        if (self.hasLink) {
          [subBuilder mergeFrom:self.link];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLink:[subBuilder buildPartial]];
        break;
      }
      case 426: {
        SignalEventBuilder* subBuilder = [SignalEvent builder];
        if (self.hasSignal) {
          [subBuilder mergeFrom:self.signal];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSignal:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultEvent.hasType;
}
- (EventEventType) type {
  return resultEvent.type;
}
- (EventBuilder*) setType:(EventEventType) value {
  resultEvent.hasType = YES;
  resultEvent.type = value;
  return self;
}
- (EventBuilder*) clearType {
  resultEvent.hasType = NO;
  resultEvent.type = EventEventTypeError;
  return self;
}
- (BOOL) hasError {
  return resultEvent.hasError;
}
- (ErrorEvent*) error {
  return resultEvent.error;
}
- (EventBuilder*) setError:(ErrorEvent*) value {
  resultEvent.hasError = YES;
  resultEvent.error = value;
  return self;
}
- (EventBuilder*) setErrorBuilder:(ErrorEventBuilder*) builderForValue {
  return [self setError:[builderForValue build]];
}
- (EventBuilder*) mergeError:(ErrorEvent*) value {
  if (resultEvent.hasError &&
      resultEvent.error != [ErrorEvent defaultInstance]) {
    resultEvent.error =
      [[[ErrorEvent builderWithPrototype:resultEvent.error] mergeFrom:value] buildPartial];
  } else {
    resultEvent.error = value;
  }
  resultEvent.hasError = YES;
  return self;
}
- (EventBuilder*) clearError {
  resultEvent.hasError = NO;
  resultEvent.error = [ErrorEvent defaultInstance];
  return self;
}
- (BOOL) hasLink {
  return resultEvent.hasLink;
}
- (LinkEvent*) link {
  return resultEvent.link;
}
- (EventBuilder*) setLink:(LinkEvent*) value {
  resultEvent.hasLink = YES;
  resultEvent.link = value;
  return self;
}
- (EventBuilder*) setLinkBuilder:(LinkEventBuilder*) builderForValue {
  return [self setLink:[builderForValue build]];
}
- (EventBuilder*) mergeLink:(LinkEvent*) value {
  if (resultEvent.hasLink &&
      resultEvent.link != [LinkEvent defaultInstance]) {
    resultEvent.link =
      [[[LinkEvent builderWithPrototype:resultEvent.link] mergeFrom:value] buildPartial];
  } else {
    resultEvent.link = value;
  }
  resultEvent.hasLink = YES;
  return self;
}
- (EventBuilder*) clearLink {
  resultEvent.hasLink = NO;
  resultEvent.link = [LinkEvent defaultInstance];
  return self;
}
- (BOOL) hasSignal {
  return resultEvent.hasSignal;
}
- (SignalEvent*) signal {
  return resultEvent.signal;
}
- (EventBuilder*) setSignal:(SignalEvent*) value {
  resultEvent.hasSignal = YES;
  resultEvent.signal = value;
  return self;
}
- (EventBuilder*) setSignalBuilder:(SignalEventBuilder*) builderForValue {
  return [self setSignal:[builderForValue build]];
}
- (EventBuilder*) mergeSignal:(SignalEvent*) value {
  if (resultEvent.hasSignal &&
      resultEvent.signal != [SignalEvent defaultInstance]) {
    resultEvent.signal =
      [[[SignalEvent builderWithPrototype:resultEvent.signal] mergeFrom:value] buildPartial];
  } else {
    resultEvent.signal = value;
  }
  resultEvent.hasSignal = YES;
  return self;
}
- (EventBuilder*) clearSignal {
  resultEvent.hasSignal = NO;
  resultEvent.signal = [SignalEvent defaultInstance];
  return self;
}
@end

@interface ErrorEvent ()
@property ErrorEventErrorType type;
@end

@implementation ErrorEvent

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = ErrorEventErrorTypeWrongVersion;
  }
  return self;
}
static ErrorEvent* defaultErrorEventInstance = nil;
+ (void) initialize {
  if (self == [ErrorEvent class]) {
    defaultErrorEventInstance = [[ErrorEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultErrorEventInstance;
}
- (instancetype) defaultInstance {
  return defaultErrorEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ErrorEvent*) parseFromData:(NSData*) data {
  return (ErrorEvent*)[[[ErrorEvent builder] mergeFromData:data] build];
}
+ (ErrorEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ErrorEvent*)[[[ErrorEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ErrorEvent*) parseFromInputStream:(NSInputStream*) input {
  return (ErrorEvent*)[[[ErrorEvent builder] mergeFromInputStream:input] build];
}
+ (ErrorEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ErrorEvent*)[[[ErrorEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ErrorEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ErrorEvent*)[[[ErrorEvent builder] mergeFromCodedInputStream:input] build];
}
+ (ErrorEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ErrorEvent*)[[[ErrorEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ErrorEventBuilder*) builder {
  return [[ErrorEventBuilder alloc] init];
}
+ (ErrorEventBuilder*) builderWithPrototype:(ErrorEvent*) prototype {
  return [[ErrorEvent builder] mergeFrom:prototype];
}
- (ErrorEventBuilder*) builder {
  return [ErrorEvent builder];
}
- (ErrorEventBuilder*) toBuilder {
  return [ErrorEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromErrorEventErrorType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ErrorEvent class]]) {
    return NO;
  }
  ErrorEvent *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL ErrorEventErrorTypeIsValidValue(ErrorEventErrorType value) {
  switch (value) {
    case ErrorEventErrorTypeWrongVersion:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromErrorEventErrorType(ErrorEventErrorType value) {
  switch (value) {
    case ErrorEventErrorTypeWrongVersion:
      return @"ErrorEventErrorTypeWrongVersion";
    default:
      return nil;
  }
}

@interface ErrorEventBuilder()
@property (strong) ErrorEvent* resultErrorEvent;
@end

@implementation ErrorEventBuilder
@synthesize resultErrorEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultErrorEvent = [[ErrorEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultErrorEvent;
}
- (ErrorEventBuilder*) clear {
  self.resultErrorEvent = [[ErrorEvent alloc] init];
  return self;
}
- (ErrorEventBuilder*) clone {
  return [ErrorEvent builderWithPrototype:resultErrorEvent];
}
- (ErrorEvent*) defaultInstance {
  return [ErrorEvent defaultInstance];
}
- (ErrorEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ErrorEvent*) buildPartial {
  ErrorEvent* returnMe = resultErrorEvent;
  self.resultErrorEvent = nil;
  return returnMe;
}
- (ErrorEventBuilder*) mergeFrom:(ErrorEvent*) other {
  if (other == [ErrorEvent defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ErrorEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ErrorEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ErrorEventErrorType value = (ErrorEventErrorType)[input readEnum];
        if (ErrorEventErrorTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultErrorEvent.hasType;
}
- (ErrorEventErrorType) type {
  return resultErrorEvent.type;
}
- (ErrorEventBuilder*) setType:(ErrorEventErrorType) value {
  resultErrorEvent.hasType = YES;
  resultErrorEvent.type = value;
  return self;
}
- (ErrorEventBuilder*) clearType {
  resultErrorEvent.hasType = NO;
  resultErrorEvent.type = ErrorEventErrorTypeWrongVersion;
  return self;
}
@end

@interface LinkEvent ()
@property SInt64 nodeId;
@property LinkEventLinkState state;
@end

@implementation LinkEvent

- (BOOL) hasNodeId {
  return !!hasNodeId_;
}
- (void) setHasNodeId:(BOOL) _value_ {
  hasNodeId_ = !!_value_;
}
@synthesize nodeId;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
- (instancetype) init {
  if ((self = [super init])) {
    self.nodeId = 0L;
    self.state = LinkEventLinkStateConnecting;
  }
  return self;
}
static LinkEvent* defaultLinkEventInstance = nil;
+ (void) initialize {
  if (self == [LinkEvent class]) {
    defaultLinkEventInstance = [[LinkEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLinkEventInstance;
}
- (instancetype) defaultInstance {
  return defaultLinkEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNodeId) {
    return NO;
  }
  if (!self.hasState) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNodeId) {
    [output writeInt64:1 value:self.nodeId];
  }
  if (self.hasState) {
    [output writeEnum:2 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNodeId) {
    size_ += computeInt64Size(1, self.nodeId);
  }
  if (self.hasState) {
    size_ += computeEnumSize(2, self.state);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LinkEvent*) parseFromData:(NSData*) data {
  return (LinkEvent*)[[[LinkEvent builder] mergeFromData:data] build];
}
+ (LinkEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkEvent*)[[[LinkEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LinkEvent*) parseFromInputStream:(NSInputStream*) input {
  return (LinkEvent*)[[[LinkEvent builder] mergeFromInputStream:input] build];
}
+ (LinkEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkEvent*)[[[LinkEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LinkEvent*)[[[LinkEvent builder] mergeFromCodedInputStream:input] build];
}
+ (LinkEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LinkEvent*)[[[LinkEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LinkEventBuilder*) builder {
  return [[LinkEventBuilder alloc] init];
}
+ (LinkEventBuilder*) builderWithPrototype:(LinkEvent*) prototype {
  return [[LinkEvent builder] mergeFrom:prototype];
}
- (LinkEventBuilder*) builder {
  return [LinkEvent builder];
}
- (LinkEventBuilder*) toBuilder {
  return [LinkEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeId", [NSNumber numberWithLongLong:self.nodeId]];
  }
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", NSStringFromLinkEventLinkState(self.state)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNodeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeId] forKey: @"nodeId"];
  }
  if (self.hasState) {
    [dictionary setObject: @(self.state) forKey: @"state"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LinkEvent class]]) {
    return NO;
  }
  LinkEvent *otherMessage = other;
  return
      self.hasNodeId == otherMessage.hasNodeId &&
      (!self.hasNodeId || self.nodeId == otherMessage.nodeId) &&
      self.hasState == otherMessage.hasState &&
      (!self.hasState || self.state == otherMessage.state) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeId] hash];
  }
  if (self.hasState) {
    hashCode = hashCode * 31 + self.state;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL LinkEventLinkStateIsValidValue(LinkEventLinkState value) {
  switch (value) {
    case LinkEventLinkStateConnecting:
    case LinkEventLinkStateConnected:
    case LinkEventLinkStateDisconnected:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromLinkEventLinkState(LinkEventLinkState value) {
  switch (value) {
    case LinkEventLinkStateConnecting:
      return @"LinkEventLinkStateConnecting";
    case LinkEventLinkStateConnected:
      return @"LinkEventLinkStateConnected";
    case LinkEventLinkStateDisconnected:
      return @"LinkEventLinkStateDisconnected";
    default:
      return nil;
  }
}

@interface LinkEventBuilder()
@property (strong) LinkEvent* resultLinkEvent;
@end

@implementation LinkEventBuilder
@synthesize resultLinkEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLinkEvent = [[LinkEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLinkEvent;
}
- (LinkEventBuilder*) clear {
  self.resultLinkEvent = [[LinkEvent alloc] init];
  return self;
}
- (LinkEventBuilder*) clone {
  return [LinkEvent builderWithPrototype:resultLinkEvent];
}
- (LinkEvent*) defaultInstance {
  return [LinkEvent defaultInstance];
}
- (LinkEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LinkEvent*) buildPartial {
  LinkEvent* returnMe = resultLinkEvent;
  self.resultLinkEvent = nil;
  return returnMe;
}
- (LinkEventBuilder*) mergeFrom:(LinkEvent*) other {
  if (other == [LinkEvent defaultInstance]) {
    return self;
  }
  if (other.hasNodeId) {
    [self setNodeId:other.nodeId];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LinkEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LinkEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNodeId:[input readInt64]];
        break;
      }
      case 16: {
        LinkEventLinkState value = (LinkEventLinkState)[input readEnum];
        if (LinkEventLinkStateIsValidValue(value)) {
          [self setState:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasNodeId {
  return resultLinkEvent.hasNodeId;
}
- (SInt64) nodeId {
  return resultLinkEvent.nodeId;
}
- (LinkEventBuilder*) setNodeId:(SInt64) value {
  resultLinkEvent.hasNodeId = YES;
  resultLinkEvent.nodeId = value;
  return self;
}
- (LinkEventBuilder*) clearNodeId {
  resultLinkEvent.hasNodeId = NO;
  resultLinkEvent.nodeId = 0L;
  return self;
}
- (BOOL) hasState {
  return resultLinkEvent.hasState;
}
- (LinkEventLinkState) state {
  return resultLinkEvent.state;
}
- (LinkEventBuilder*) setState:(LinkEventLinkState) value {
  resultLinkEvent.hasState = YES;
  resultLinkEvent.state = value;
  return self;
}
- (LinkEventBuilder*) clearState {
  resultLinkEvent.hasState = NO;
  resultLinkEvent.state = LinkEventLinkStateConnecting;
  return self;
}
@end

@interface SignalEvent ()
@property SInt64 nodeId;
@property (strong) NSData* data;
@end

@implementation SignalEvent

- (BOOL) hasNodeId {
  return !!hasNodeId_;
}
- (void) setHasNodeId:(BOOL) _value_ {
  hasNodeId_ = !!_value_;
}
@synthesize nodeId;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.nodeId = 0L;
    self.data = [NSData data];
  }
  return self;
}
static SignalEvent* defaultSignalEventInstance = nil;
+ (void) initialize {
  if (self == [SignalEvent class]) {
    defaultSignalEventInstance = [[SignalEvent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSignalEventInstance;
}
- (instancetype) defaultInstance {
  return defaultSignalEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNodeId) {
    return NO;
  }
  if (!self.hasData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNodeId) {
    [output writeInt64:1 value:self.nodeId];
  }
  if (self.hasData) {
    [output writeData:2 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNodeId) {
    size_ += computeInt64Size(1, self.nodeId);
  }
  if (self.hasData) {
    size_ += computeDataSize(2, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SignalEvent*) parseFromData:(NSData*) data {
  return (SignalEvent*)[[[SignalEvent builder] mergeFromData:data] build];
}
+ (SignalEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SignalEvent*)[[[SignalEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SignalEvent*) parseFromInputStream:(NSInputStream*) input {
  return (SignalEvent*)[[[SignalEvent builder] mergeFromInputStream:input] build];
}
+ (SignalEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SignalEvent*)[[[SignalEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SignalEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SignalEvent*)[[[SignalEvent builder] mergeFromCodedInputStream:input] build];
}
+ (SignalEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SignalEvent*)[[[SignalEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SignalEventBuilder*) builder {
  return [[SignalEventBuilder alloc] init];
}
+ (SignalEventBuilder*) builderWithPrototype:(SignalEvent*) prototype {
  return [[SignalEvent builder] mergeFrom:prototype];
}
- (SignalEventBuilder*) builder {
  return [SignalEvent builder];
}
- (SignalEventBuilder*) toBuilder {
  return [SignalEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeId", [NSNumber numberWithLongLong:self.nodeId]];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNodeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeId] forKey: @"nodeId"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SignalEvent class]]) {
    return NO;
  }
  SignalEvent *otherMessage = other;
  return
      self.hasNodeId == otherMessage.hasNodeId &&
      (!self.hasNodeId || self.nodeId == otherMessage.nodeId) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeId] hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SignalEventBuilder()
@property (strong) SignalEvent* resultSignalEvent;
@end

@implementation SignalEventBuilder
@synthesize resultSignalEvent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSignalEvent = [[SignalEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSignalEvent;
}
- (SignalEventBuilder*) clear {
  self.resultSignalEvent = [[SignalEvent alloc] init];
  return self;
}
- (SignalEventBuilder*) clone {
  return [SignalEvent builderWithPrototype:resultSignalEvent];
}
- (SignalEvent*) defaultInstance {
  return [SignalEvent defaultInstance];
}
- (SignalEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SignalEvent*) buildPartial {
  SignalEvent* returnMe = resultSignalEvent;
  self.resultSignalEvent = nil;
  return returnMe;
}
- (SignalEventBuilder*) mergeFrom:(SignalEvent*) other {
  if (other == [SignalEvent defaultInstance]) {
    return self;
  }
  if (other.hasNodeId) {
    [self setNodeId:other.nodeId];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SignalEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SignalEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNodeId:[input readInt64]];
        break;
      }
      case 18: {
        [self setData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasNodeId {
  return resultSignalEvent.hasNodeId;
}
- (SInt64) nodeId {
  return resultSignalEvent.nodeId;
}
- (SignalEventBuilder*) setNodeId:(SInt64) value {
  resultSignalEvent.hasNodeId = YES;
  resultSignalEvent.nodeId = value;
  return self;
}
- (SignalEventBuilder*) clearNodeId {
  resultSignalEvent.hasNodeId = NO;
  resultSignalEvent.nodeId = 0L;
  return self;
}
- (BOOL) hasData {
  return resultSignalEvent.hasData;
}
- (NSData*) data {
  return resultSignalEvent.data;
}
- (SignalEventBuilder*) setData:(NSData*) value {
  resultSignalEvent.hasData = YES;
  resultSignalEvent.data = value;
  return self;
}
- (SignalEventBuilder*) clearData {
  resultSignalEvent.hasData = NO;
  resultSignalEvent.data = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
