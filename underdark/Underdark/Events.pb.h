// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import <ProtocolBuffers/ProtocolBuffers.h>

// @@protoc_insertion_point(imports)

@class ErrorEvent;
@class ErrorEventBuilder;
@class Event;
@class EventBuilder;
@class LinkEvent;
@class LinkEventBuilder;
@class SignalEvent;
@class SignalEventBuilder;


typedef NS_ENUM(SInt32, EventEventType) {
  EventEventTypeError = 1,
  EventEventTypeLink = 2,
  EventEventTypeSignal = 3,
};

BOOL EventEventTypeIsValidValue(EventEventType value);
NSString *NSStringFromEventEventType(EventEventType value);

typedef NS_ENUM(SInt32, ErrorEventErrorType) {
  ErrorEventErrorTypeWrongVersion = 1,
};

BOOL ErrorEventErrorTypeIsValidValue(ErrorEventErrorType value);
NSString *NSStringFromErrorEventErrorType(ErrorEventErrorType value);

typedef NS_ENUM(SInt32, LinkEventLinkState) {
  LinkEventLinkStateConnecting = 1,
  LinkEventLinkStateConnected = 2,
  LinkEventLinkStateDisconnected = 3,
};

BOOL LinkEventLinkStateIsValidValue(LinkEventLinkState value);
NSString *NSStringFromLinkEventLinkState(LinkEventLinkState value);


@interface EventsRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

#define Event_type @"type"
#define Event_error @"error"
#define Event_link @"link"
#define Event_signal @"signal"
@interface Event : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasError_:1;
  BOOL hasLink_:1;
  BOOL hasSignal_:1;
  BOOL hasType_:1;
  ErrorEvent* error;
  LinkEvent* link;
  SignalEvent* signal;
  EventEventType type;
}
- (BOOL) hasType;
- (BOOL) hasError;
- (BOOL) hasLink;
- (BOOL) hasSignal;
@property (readonly) EventEventType type;
@property (readonly, strong) ErrorEvent* error;
@property (readonly, strong) LinkEvent* link;
@property (readonly, strong) SignalEvent* signal;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (EventBuilder*) builder;
+ (EventBuilder*) builder;
+ (EventBuilder*) builderWithPrototype:(Event*) prototype;
- (EventBuilder*) toBuilder;

+ (Event*) parseFromData:(NSData*) data;
+ (Event*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Event*) parseFromInputStream:(NSInputStream*) input;
+ (Event*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface EventBuilder : PBGeneratedMessageBuilder {
@private
  Event* resultEvent;
}

- (Event*) defaultInstance;

- (EventBuilder*) clear;
- (EventBuilder*) clone;

- (Event*) build;
- (Event*) buildPartial;

- (EventBuilder*) mergeFrom:(Event*) other;
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (EventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasType;
- (EventEventType) type;
- (EventBuilder*) setType:(EventEventType) value;
- (EventBuilder*) clearType;

- (BOOL) hasError;
- (ErrorEvent*) error;
- (EventBuilder*) setError:(ErrorEvent*) value;
- (EventBuilder*) setErrorBuilder:(ErrorEventBuilder*) builderForValue;
- (EventBuilder*) mergeError:(ErrorEvent*) value;
- (EventBuilder*) clearError;

- (BOOL) hasLink;
- (LinkEvent*) link;
- (EventBuilder*) setLink:(LinkEvent*) value;
- (EventBuilder*) setLinkBuilder:(LinkEventBuilder*) builderForValue;
- (EventBuilder*) mergeLink:(LinkEvent*) value;
- (EventBuilder*) clearLink;

- (BOOL) hasSignal;
- (SignalEvent*) signal;
- (EventBuilder*) setSignal:(SignalEvent*) value;
- (EventBuilder*) setSignalBuilder:(SignalEventBuilder*) builderForValue;
- (EventBuilder*) mergeSignal:(SignalEvent*) value;
- (EventBuilder*) clearSignal;
@end

#define ErrorEvent_type @"type"
@interface ErrorEvent : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasType_:1;
  ErrorEventErrorType type;
}
- (BOOL) hasType;
@property (readonly) ErrorEventErrorType type;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (ErrorEventBuilder*) builder;
+ (ErrorEventBuilder*) builder;
+ (ErrorEventBuilder*) builderWithPrototype:(ErrorEvent*) prototype;
- (ErrorEventBuilder*) toBuilder;

+ (ErrorEvent*) parseFromData:(NSData*) data;
+ (ErrorEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ErrorEvent*) parseFromInputStream:(NSInputStream*) input;
+ (ErrorEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (ErrorEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (ErrorEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface ErrorEventBuilder : PBGeneratedMessageBuilder {
@private
  ErrorEvent* resultErrorEvent;
}

- (ErrorEvent*) defaultInstance;

- (ErrorEventBuilder*) clear;
- (ErrorEventBuilder*) clone;

- (ErrorEvent*) build;
- (ErrorEvent*) buildPartial;

- (ErrorEventBuilder*) mergeFrom:(ErrorEvent*) other;
- (ErrorEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (ErrorEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasType;
- (ErrorEventErrorType) type;
- (ErrorEventBuilder*) setType:(ErrorEventErrorType) value;
- (ErrorEventBuilder*) clearType;
@end

#define LinkEvent_nodeId @"nodeId"
#define LinkEvent_state @"state"
@interface LinkEvent : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasNodeId_:1;
  BOOL hasState_:1;
  SInt64 nodeId;
  LinkEventLinkState state;
}
- (BOOL) hasNodeId;
- (BOOL) hasState;
@property (readonly) SInt64 nodeId;
@property (readonly) LinkEventLinkState state;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (LinkEventBuilder*) builder;
+ (LinkEventBuilder*) builder;
+ (LinkEventBuilder*) builderWithPrototype:(LinkEvent*) prototype;
- (LinkEventBuilder*) toBuilder;

+ (LinkEvent*) parseFromData:(NSData*) data;
+ (LinkEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LinkEvent*) parseFromInputStream:(NSInputStream*) input;
+ (LinkEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LinkEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (LinkEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface LinkEventBuilder : PBGeneratedMessageBuilder {
@private
  LinkEvent* resultLinkEvent;
}

- (LinkEvent*) defaultInstance;

- (LinkEventBuilder*) clear;
- (LinkEventBuilder*) clone;

- (LinkEvent*) build;
- (LinkEvent*) buildPartial;

- (LinkEventBuilder*) mergeFrom:(LinkEvent*) other;
- (LinkEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (LinkEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasNodeId;
- (SInt64) nodeId;
- (LinkEventBuilder*) setNodeId:(SInt64) value;
- (LinkEventBuilder*) clearNodeId;

- (BOOL) hasState;
- (LinkEventLinkState) state;
- (LinkEventBuilder*) setState:(LinkEventLinkState) value;
- (LinkEventBuilder*) clearState;
@end

#define SignalEvent_nodeId @"nodeId"
#define SignalEvent_data @"data"
@interface SignalEvent : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasNodeId_:1;
  BOOL hasData_:1;
  SInt64 nodeId;
  NSData* data;
}
- (BOOL) hasNodeId;
- (BOOL) hasData;
@property (readonly) SInt64 nodeId;
@property (readonly, strong) NSData* data;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (SignalEventBuilder*) builder;
+ (SignalEventBuilder*) builder;
+ (SignalEventBuilder*) builderWithPrototype:(SignalEvent*) prototype;
- (SignalEventBuilder*) toBuilder;

+ (SignalEvent*) parseFromData:(NSData*) data;
+ (SignalEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (SignalEvent*) parseFromInputStream:(NSInputStream*) input;
+ (SignalEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (SignalEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (SignalEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface SignalEventBuilder : PBGeneratedMessageBuilder {
@private
  SignalEvent* resultSignalEvent;
}

- (SignalEvent*) defaultInstance;

- (SignalEventBuilder*) clear;
- (SignalEventBuilder*) clone;

- (SignalEvent*) build;
- (SignalEvent*) buildPartial;

- (SignalEventBuilder*) mergeFrom:(SignalEvent*) other;
- (SignalEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (SignalEventBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasNodeId;
- (SInt64) nodeId;
- (SignalEventBuilder*) setNodeId:(SInt64) value;
- (SignalEventBuilder*) clearNodeId;

- (BOOL) hasData;
- (NSData*) data;
- (SignalEventBuilder*) setData:(NSData*) value;
- (SignalEventBuilder*) clearData;
@end


// @@protoc_insertion_point(global_scope)
